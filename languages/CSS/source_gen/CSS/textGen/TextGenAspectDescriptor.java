package CSS.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import CSS.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.CSS_Declaration:
        return new CSS_Declaration_TextGen();
      case LanguageConceptSwitch.CSS_Declaration_Block:
        return new CSS_Declaration_Block_TextGen();
      case LanguageConceptSwitch.CSS_File:
        return new CSS_File_TextGen();
      case LanguageConceptSwitch.CSS_Ruleset:
        return new CSS_Ruleset_TextGen();
      case LanguageConceptSwitch.CSS_Selector:
        return new CSS_Selector_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(MetaAdapterFactory.getConcept(0x8b04c156ec8d4138L, 0x9a8f46ff1babc15fL, 0x55762e27733a8d11L, "CSS.structure.CSS_File"))) {
        String fname = getFileName_CSS_File(root);
        String ext = getFileExtension_CSS_File(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_CSS_File(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_CSS_File(SNode node) {
    return "css";
  }
}
